#!/usr/bin/env ruby

require "keeptesting"
require "optparse"
require "fssm"
require "yaml"


def usage
  <<USAGE

Usage: keeptesting [options] 'FAILURE-MATCHING-REGEX' 'TEST-COMMAND'

Run tests whenever files change in the current directory or subdirectories.

Spits back indication of test success or failure, based on specified regex
that detects errors/failures in the output of a test run.
Starts embedded webserver by default, letting you see test feedback in browser
window. Can also run in the command line.

If you have a .keeptesting dotfile present, you can just type 'keeptesting' to
run with the options, error detection and test command etc specified in
the dotfile.

Note: Be sure to use quotes around params like the examples!

Examples:

keeptesting 'Error|Failure' 'rake test'                       (Run tests whenever anything changes)
keeptesting -p 'test' -p 'lib' -c 'Error|Failure' 'rake test' (Test on changes in test/ or lib/)

  -c, --command-line-mode       Commandline mode
  -p, --watched-path            Path to watch for changes 
  -d, --store-dotfile           Save current keeptesting config in dotfile
  -h, --help                    Display usage
  -v, --version                 Display version number

USAGE
end


def parse_options
  options = {}

  if ARGV.size == 0
    return YAML.load(File.read(".keeptesting"))
  end
  
  ARGV.each do |arg|
    if arg == "-v" || arg == "--version"
      puts Keeptesting::VERSION; exit
    elsif arg == "-h" || arg == "--help"
      puts usage; exit
    end
  end

  if ARGV.size < 2
    puts usage; exit
  end

  options[:failure_regex] = ARGV[ARGV.size-2]
  options[:test_command] = ARGV[ARGV.size-1]
  
  ARGV.each_with_index do |arg, i|
    if arg == "-c" || arg == "--command-line-mode"
      options[:cli_mode] = true
    end
    
    if arg == "-p" || arg == "--watched-path"
      options[:watched_paths] ||= []
      options[:watched_paths] << ARGV[i+1]
    end
  end

  if !options[:watched_paths]
    options[:watched_paths] == ["**/*"]
  end

  if ARGV.include?("-d") || ARGV.include?("--store-dotfile") 
    File.open(".keeptesting", "w+") do |f|
      f.write(YAML::dump(options))
    end
  end
  
  return options
end


options = parse_options

if options[:cli_mode]
  Keeptesting::CLI::start_test_loop(options)
else
  Keeptesting::BrowserConsole.new(options)
end
